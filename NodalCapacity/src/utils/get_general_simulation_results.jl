"""
Get the general results of an OpenDSS simulation, including:
- Total power imported from the sources (high voltage grid).
- Total power generated by PV systems.
- Total power demanded by the loads.
- Total system losses.

# Returns
- `Dict`: A dictionary containing the following keys and their respective values:
  - `total_imported_power_p_kw`: Total real power imported from the sources (kW, positive).
  - `total_imported_power_q_kvar`: Total reactive power imported from the sources (kvar, positive).
  - `total_pv_generation_p_kw`: Total real power generated by PV systems (kW).
  - `total_pv_generation_q_kvar`: Total reactive power generated by PV systems (kvar).
  - `total_load_p_kw`: Total real power demanded by loads (kW).
  - `total_load_q_kvar`: Total reactive power demanded by loads (kvar).
  - `total_losses_p_kw`: Total real power losses (kW).
  - `total_losses_q_kvar`: Total reactive power losses (kvar).
"""
function get_general_simulation_results(show_table::Bool = true)::Dict
    try
        # --- Global Data ---
        # Total power imported from the sources (i.e., the power flowing from the substation to the feeder)
        total_power = OpenDSSDirect.Circuit.TotalPower() # Complex from the feeder to the substation
        total_imported_power_p_kw = -real(total_power[1])   # Real part of complex power (positive) and convert to kW and change sign
        total_imported_power_q_kvar = -imag(total_power[1]) # Imaginary part of complex power (positive) and convert to kvar and change sign

        # Total system losses
        total_losses = OpenDSSDirect.Circuit.Losses() 
        total_losses_p_kw = real(total_losses[1]) / 1000.0  # Convert W to kW 
        total_losses_q_kvar = imag(total_losses[1]) / 1000.0 # Convert var to kvar

        # Total power demanded by loads
        total_load_p_kw = 0.0
        total_load_q_kvar = 0.0
        l = OpenDSSDirect.Loads.First()
        while l > 0
            total_load_p_kw += OpenDSSDirect.Loads.kW()
            total_load_q_kvar += OpenDSSDirect.Loads.kvar()
            l = OpenDSSDirect.Loads.Next()
        end

        # Total power generated by PV systems
        total_pv_generation_p_kw = 0.0
        total_pv_generation_q_kvar = 0.0
        p = OpenDSSDirect.PVsystems.First()
        while p > 0
            total_pv_generation_p_kw += OpenDSSDirect.PVsystems.kW()
            total_pv_generation_q_kvar += OpenDSSDirect.PVsystems.kvar()
            p = OpenDSSDirect.PVsystems.Next()
        end

        # Build the results dictionary
        general_results = Dict(
            "total_imported_power_p_kw" => total_imported_power_p_kw,
            "total_imported_power_q_kvar" => total_imported_power_q_kvar,
            "total_pv_generation_p_kw" => total_pv_generation_p_kw,
            "total_pv_generation_q_kvar" => total_pv_generation_q_kvar,
            "total_load_p_kw" => total_load_p_kw,
            "total_load_q_kvar" => total_load_q_kvar,
            "total_losses_p_kw" => total_losses_p_kw,
            "total_losses_q_kvar" => total_losses_q_kvar
        )

        if show_table
            df = DataFrame(
                "Variable" => [
                    "Total Imported Power", 
                    "Total PV Generation", 
                    "Total Load Demand", 
                    "Total System Losses"
                ],
                "P (kW)"   => [
                    round(general_results["total_imported_power_p_kw"], digits=2),
                    round(general_results["total_pv_generation_p_kw"], digits=2),
                    round(general_results["total_load_p_kw"], digits=2),
                    round(general_results["total_losses_p_kw"], digits=2)
                ],
                "Q (kvar)" => [
                    round(general_results["total_imported_power_q_kvar"], digits=2),
                    round(general_results["total_pv_generation_q_kvar"], digits=2),
                    round(general_results["total_load_q_kvar"], digits=2),
                    round(general_results["total_losses_q_kvar"], digits=2)
                ]
            )
            pretty_table(df, formatters = ft_printf("%5.2f"), crop = :none, display_size = (100, 100))
        end

        return general_results
    catch e
        println("Error during general simulation result extraction: ", e)
        return Dict("error" => "An error occurred during general simulation result extraction.")
    end
end
